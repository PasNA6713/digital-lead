{"remainingRequest":"C:\\Users\\John-\\Projects\\Frontend\\VueProjects\\spb-alert-system\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\John-\\Projects\\Frontend\\VueProjects\\spb-alert-system\\src\\components\\Map.vue?vue&type=style&index=0&id=3074bd5c&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\John-\\Projects\\Frontend\\VueProjects\\spb-alert-system\\src\\components\\Map.vue","mtime":1605341472851},{"path":"C:\\Users\\John-\\Projects\\Frontend\\VueProjects\\spb-alert-system\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\John-\\Projects\\Frontend\\VueProjects\\spb-alert-system\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\John-\\Projects\\Frontend\\VueProjects\\spb-alert-system\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\John-\\Projects\\Frontend\\VueProjects\\spb-alert-system\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\John-\\Projects\\Frontend\\VueProjects\\spb-alert-system\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCg0KI21hcHsNCiAgICB3aWR0aDogODAwcHg7IA0KICAgIGhlaWdodDogNjYwcHg7DQogICAgbWFyZ2luLWxlZnQ6IDMwcHg7DQp9DQo="},{"version":3,"sources":["Map.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoHA;AACA;AACA;AACA;AACA","file":"Map.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <div>\r\n        <br>\r\n        <div class=\"border primary-border\" id=\"map\"></div>\r\n        <br>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport {mapGetters, mapMutations} from 'vuex'\r\n\r\n    export default{\r\n        data: () => ({\r\n            placemarks: {\r\n                \"type\": \"FeatureCollection\",\r\n                \"features\": [\r\n                    {\r\n                        type: 'Feature',\r\n                        id: 3,\r\n                        geometry: {\r\n                            type: 'Point',\r\n                            coordinates: [59.9, 30.55]\r\n                        },\r\n                        properties: {\r\n                            hintContent: 'Содержание всплывающей подсказки',\r\n                            balloonContent: 'Содержание балуна'\r\n                        },\r\n                        options: {\r\n                            preset: \"islands#dotIcon\",\r\n                            iconColor: \"blue\"\r\n                        }\r\n                    }   \r\n                ],\r\n            },\r\n            myMap: null,\r\n            objectManager: null,\r\n\r\n            messages: null,\r\n            classifier: {\r\n                1: 'yellow',\r\n                2: 'blue',\r\n                3: 'red'\r\n            }\r\n            }),\r\n              methods: {\r\n            ...mapMutations([\"updateMessages\"])\r\n        },\r\n        computed:{\r\n            \r\n        },\r\n\r\n        created() {\r\n            axios\r\n          .get('https://46c60a696609.ngrok.io/message/get/?danger=1')\r\n          .then((response) => {\r\n              this.messages = response.data[\"data\"]\r\n                for (let i=0;i<this.messages.length;i++){\r\n            this.placemarks[\"features\"].push({\r\n\r\n            type: 'Feature',\r\n            id: this.messages[i][\"id\"],\r\n            geometry: {\r\n                type: 'Point',\r\n                coordinates: [this.messages[i][\"address\"][\"latitude\"], this.messages[i][\"address\"][\"longtitude\"]]\r\n            },\r\n            properties: {\r\n                hintContent: this.messages[i][\"date\"],\r\n                balloonContent: this.messages[i][\"text\"]\r\n            },\r\n            options: {\r\n                preset: \"islands#dotIcon\",\r\n                iconColor: this.classifier[this.messages[i][\"danger_level\"]]\r\n            }\r\n        })\r\n\r\n\r\n        }\r\n            this.updateMessages(this.messages)\r\n\r\n            ymaps.ready(() => {\r\n                this.myMap = new ymaps.Map(\"map\", {\r\n                    center: [59.9370, 30.3089],\r\n                    zoom: 10,\r\n                    controls: ['zoomControl'], \r\n                    behaviors: ['drag', 'scrollZoom']\r\n                }, {\r\n                    searchControlProvider: 'yandex#search'\r\n                })\r\n\r\n                this.objectManager = new ymaps.ObjectManager({\r\n                    clusterize: true,\r\n                    gridSize: 32,\r\n                    clusterDisableClickZoom: true\r\n                })\r\n                \r\n                this.objectManager.clusters.options.set('preset', 'islands#redClusterIcons')\r\n                this.objectManager.add(this.placemarks)\r\n\r\n                this.myMap.geoObjects.add(this.objectManager)\r\n\r\n\r\n                this.myMap.geoObjects.events.add('click', function (e) {\r\n                    let target = e.get('objectId');\r\n                    const cluster = this.objectManager.clusters.getById(target)\r\n                    if (cluster) {\r\n                        const objects = cluster.properties.geoObjects\r\n                    }\r\n                })\r\n            })\r\n        })\r\n        }\r\n        \r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n#map{\r\n    width: 800px; \r\n    height: 660px;\r\n    margin-left: 30px;\r\n}\r\n</style>"]}]}